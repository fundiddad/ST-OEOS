// Manages the game state by reading from and writing to the dedicated World Info entries.

import { saveWi, loadWi } from './st-api.js';
import OEOSV4Parser from '../../util/v4-parser.js';

/**
 * Updates the World Info entries with a new page generated by the AI.
 * @param {string} id - The ID of the new page.
 * @param {string} content - The OEOScript v4 content of the new page.
 * @param {string} abstract - The text abstract of the new page.
 */
export async function updatePageEntry(id, content, abstract) {
    // 1. Update Pages
    const pagesContent = await loadWi('WI-OEOS-Pages');
    const newPagesContent = `${pagesContent}\n\n<oeos page id="${id}">\n${content}\n</oeos page>`;
    await saveWi('WI-OEOS-Pages', newPagesContent);

    // 2. Update Abstracts
    const abstractsContent = await loadWi('WI-OEOS-Abstracts');
    const newAbstractsContent = `${abstractsContent}${id}: ${abstract};\n`;
    await saveWi('WI-OEOS-Abstracts', newAbstractsContent);

    // 3. Update Graph
    try {
        const pageJson = OEOSV4Parser.toV1(content);
        const gotos = findGotosInCommands(pageJson.pages[Object.keys(pageJson.pages)[0]]);
        if (gotos.length > 0) {
            const graphContent = await loadWi('WI-OEOS-Graph');
            const newGraphContent = `${graphContent}${id} > ${gotos.join(', ')};\n`;
            await saveWi('WI-OEOS-Graph', newGraphContent);
        }
    } catch (e) {
        console.error(`[OEOS] Failed to parse goto commands for graph update: ${e.message}`);
    }
}

/**
 * Recursively finds all goto targets in a command list.
 * @param {Array<Object>} commands - The list of commands to search through.
 * @returns {Array<string>} - A list of unique goto targets.
 */
function findGotosInCommands(commands) {
    let targets = [];
    if (!commands) return targets;

    for (const command of commands) {
        const commandType = Object.keys(command)[0];
        const commandData = command[commandType];

        if (commandType === 'goto') {
            targets.push(commandData.target);
        }
        // Recursively search in nested commands (if, choice options, etc.)
        if (commandData.commands) {
            targets = targets.concat(findGotosInCommands(commandData.commands));
        }
        if (commandData.elseCommands) {
            targets = targets.concat(findGotosInCommands(commandData.elseCommands));
        }
        if (commandData.options) {
            for (const option of commandData.options) {
                if (option.commands) {
                    targets = targets.concat(findGotosInCommands(option.commands));
                }
            }
        }
    }
    // Return unique targets
    return [...new Set(targets)];
}


/**
 * Updates the state entry in World Info based on the player's last action.
 * @param {object} newState - The new state from the OEOS player. e.g., { pageId: 'A1', variables: { hp: 90 } }
 */
export async function updateStateEntry(newState) {
    const currentState = await loadWi('WI-OEOS-State');

    // Format variables into a compact string: (hp:90,gold:450)
    const variablesString = `(${Object.entries(newState.variables || {})
        .map(([key, value]) => `${key}:${value}`)
        .join(',')})`;

    const newStateString = ` > ${newState.pageId}${variablesString}`;
    await saveWi('WI-OEOS-State', currentState + newStateString);
}
